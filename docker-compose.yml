services:
  prestart:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}"
    container_name: setting_server
    build:
      context: backend
    depends_on:
      db:
        condition: service_healthy
    command: >
      /bin/bash -c "
      bash scripts/prestart.sh &&
      bash scripts/test.sh &&
      echo 'âœ… All scripts completed'
      "
    env_file:
      - .env
    environment:
      - PROJECT_NAME=${PROJECT_NAME?Variable not set}
      - HOST_BACKEND=${HOST_BACKEND:-0.0.0.0}
      - PORT_BACKEND=${PORT_BACKEND:-8000}
      - POSTGRES_SERVER=${POSTGRES_SERVER?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}"
    container_name: server
    build:
      context: backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PROJECT_NAME=${PROJECT_NAME?Variable not set}
      - HOST_BACKEND=${HOST_BACKEND:-0.0.0.0}
      - PORT_BACKEND=${PORT_BACKEND:-8000}
      - POSTGRES_SERVER=${POSTGRES_SERVER?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    container_name: postgres_db
    image: postgres:latest
    env_file:
      - .env
    restart: unless-stopped
    shm_size: 128mb
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8080:8080"

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD?Variable not set}
      - REDIS_USER=${REDIS_USER?Variable not set}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD?Variable not set}
    ports:
      - "6380:6379"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        redis-server --appendonly yes --requirepass "$REDIS_PASSWORD" &
        sleep 2 &&
        export REDISCLI_AUTH="$REDIS_PASSWORD" &&
        redis-cli ACL SETUSER "$REDIS_USER" on ">$REDIS_USER_PASSWORD" allcommands allchannels allkeys &&
        tail -f /dev/null
      '
    healthcheck:
      test: [ "CMD", "sh", "-c", "export REDISCLI_AUTH=$REDIS_PASSWORD && redis-cli ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

volumes:
  app-db-data:
